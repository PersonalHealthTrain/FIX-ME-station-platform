buildscript {
	ext {
		kotlinVersion = '1.2.71'
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

plugins {
    id "org.jetbrains.kotlin.plugin.jpa" version "1.2.71"
}

apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'de.difuture.ekut.pht'
version = '0.0.2'
sourceCompatibility = 1.8


compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	// The Artifactory for the PHT project
	maven {
		url "https://artifactory.difuture.de/pht"
	}
	// That is where the JDregistry is currently hosted
	maven {
		url  "https://dl.bintray.com/lukaszimmermann/jdregistry"
	}
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            version '0.0.2'
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/libs/station-0.0.2.pom")
    }
}

/*
 * Enable source and javadoc for Maven publish
 */

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {

    // This is required to make the Spotify Docker client work. see:
    // https://github.com/spotify/docker-client/issues/1030
    compile group: 'org.glassfish.jersey.bundles.repackaged', name: 'jersey-guava', version: '2.25.1'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'

    // Kotlin stuff
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    // Spring stuff
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    // The PHT API and the Docker client implementation based on the Spotify client that we want to use
    compile group: 'de.difuture.ekut.pht.lib', name: 'api', version: '0.1.1'
    compile group: 'de.difuture.ekut.pht.lib', name: 'runtime-docker-spotify', version: '0.0.5'

    // The HttpClient that we use for the Docker Registry
    compile group: 'jdregistry.client', name: 'http-spring', version: '0.0.6'

    // Runtime dependency on H2
    runtime('com.h2database:h2')
}
